//1.Implement Bresenham's line drawing algorithm for all types of slope.

#include <GL/gl.h>
#include <GL/glut.h>
#include <stdio.h>

int x1, y1, x2, y2;

void myInit()
{
   glClear(GL_COLOR_BUFFER_BIT);
   glClearColor(0.0, 0.0, 0.0, 1.0);
   glMatrixMode(GL_PROJECTION);
   gluOrtho2D(0, 500, 0, 500);
}

void draw_pixel(int x, int y)
{
     glBegin(GL_POINTS);
     glVertex2i(x, y);
     glEnd();
}
void draw_line(int x1, int x2, int y1, int y2)
{
     int dx, dy, i, dp;
      int incx, incy, inc1, inc2;
      int x,y;
      dx = x2-x1;
     dy = y2-y1;

if (dx < 0)           dx = -dx;
if (dy < 0)           dy = -dy;
incx = 1;                                    //inc x by 1

if (x2 < x1)   incx = -1;              //dec only x
incy = 1;                                  //incr y by 1
if (y2 < y1) incy = -1;            //dec only y
x = x1; y = y1;

if (dx > dy)
{
    draw_pixel(x, y);
    dp = 2 * dy-dx;
   for (i=0; i<dx; i++)            // x1 to x2
   {
    if (dp >= 0)    // select upper pixel (xk+1,yk+1) so incr y
     {
        y += incy;  //
        dp = dp+ 2*dy-2*dx;
     }
   else
   dp = dp + 2*dy;      //select lower pixel (xk+1,yk)
   x += incx;
  draw_pixel(x, y);
 }
}

else     //dx<=dy
{
draw_pixel(x, y);
dp = 2*dx-dy;
  for (i=0; i<dy; i++)
  {
     if (dp >= 0)
     {
        x += incx;
        dp = dp + 2*dx-2*dy;
     }
  else
     dp= dp + 2*dx;
   y += incy;
   draw_pixel(x, y);
 }
}
}

void myDisplay()
{
   draw_line(x1, x2, y1, y2);
    glFlush();
}
int main(int argc, char **argv)
{
   printf( "Enter  FIRST END POINT OF THE LINE  SEGMENT(x1, y1)\n");
scanf("%d%d",&x1,&y1);
printf( "Enter  SECOND END  POINT OF THE LINE SEGMENT(x2, y2)\n");
scanf("%d%d",&x2,&y2);
glutInit(&argc, argv);
glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
glutInitWindowSize(500, 500);
glutInitWindowPosition(0, 0);
glutCreateWindow("Bresenham's Line Drawing");
myInit();
glutDisplayFunc(myDisplay);
glutMainLoop();

return 0;
}

